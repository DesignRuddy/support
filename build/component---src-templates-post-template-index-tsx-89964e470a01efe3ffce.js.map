{"version":3,"file":"component---src-templates-post-template-index-tsx-89964e470a01efe3ffce.js","mappings":"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","sources":["webpack://support_sosok/./src/components/Utterances/styled.ts","webpack://support_sosok/./src/components/Utterances/index.tsx","webpack://support_sosok/./src/models/helps.ts","webpack://support_sosok/./src/components/PostHeader/styled.ts","webpack://support_sosok/./src/components/PostHeader/index.tsx","webpack://support_sosok/./src/components/PostNavigator/styled.ts","webpack://support_sosok/./src/components/PostNavigator/index.tsx","webpack://support_sosok/./src/templates/post-template/styled.ts","webpack://support_sosok/./src/templates/post-template/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const Wrapper = styled.div`\r\n  margin: 30px 0;\r\n`;\r\n","import { ThemeManagerContext } from 'gatsby-emotion-dark-mode';\r\nimport React, { createRef, useContext, useEffect, useRef } from 'react';\r\n\r\nimport * as S from './styled';\r\n\r\nconst src = 'https://utteranc.es/client.js';\r\nconst branch = 'main';\r\n\r\ntype UtterancesProps = {\r\n  repo: string;\r\n  path: string;\r\n};\r\n\r\nconst Utterances: React.FC<UtterancesProps> = ({ repo, path }) => {\r\n  const rootElm = createRef<HTMLDivElement>();\r\n  const isUtterancesLoaded = useRef(false);\r\n  const theme = useContext(ThemeManagerContext);\r\n\r\n  useEffect(() => {\r\n    if (!rootElm.current) return;\r\n\r\n    const utterances = document.createElement('script');\r\n    const utterancesConfig: { [key: string]: unknown } = {\r\n      src,\r\n      repo,\r\n      branch,\r\n      'theme': theme.isDark ? 'photon-dark' : 'github-light',\r\n      'label': 'comment',\r\n      'async': true,\r\n      'issue-term': 'pathname',\r\n      'crossorigin': 'anonymous',\r\n    };\r\n\r\n    Object.keys(utterancesConfig).forEach((configKey) => {\r\n      utterances.setAttribute(configKey, utterancesConfig[configKey] as string);\r\n    });\r\n    rootElm.current.appendChild(utterances);\r\n\r\n    if (isUtterancesLoaded.current) {\r\n      rootElm.current.replaceChild(utterances, rootElm.current.firstChild as Node);\r\n    } else {\r\n      isUtterancesLoaded.current = true;\r\n    }\r\n  }, [rootElm, path, theme.isDark]);\r\n\r\n  return <S.Wrapper className='utterances' ref={rootElm} />;\r\n};\r\n\r\nexport default Utterances;\r\n","import { MarkdownRemark } from '../type';\r\n\r\nexport default class HelpsClass {\r\n  id;\r\n  html;\r\n  slug;\r\n  title;\r\n  date;\r\n  services;\r\n  excerpt;\r\n  categories;\r\n  // filteredCategories;\r\n\r\n  constructor(node: MarkdownRemark) {\r\n    const { html, id, frontmatter, fields, excerpt } = node;\r\n    const { slug } = fields;\r\n    const { categories, title, date, services } = frontmatter;\r\n\r\n    const categoryArr = categories.split(' ');\r\n\r\n    this.id = id;\r\n    this.excerpt = excerpt;\r\n    this.services = services\r\n    this.html = html;\r\n    this.slug = slug;\r\n    this.title = title;\r\n    this.date = date;\r\n    this.categories = categoryArr;\r\n    // this.filteredCategories = categoryArr.map((category) => {\r\n    //   return category.replace('featured-', '').trim();\r\n    // });\r\n  }\r\n}\r\n","import styled from '@emotion/styled';\r\nimport { Link } from 'gatsby';\r\n\r\nimport { hoverUnderline, MOBILE_MEDIA_QUERY } from '@/src/styles/const';\r\n\r\nexport const Header = styled.header`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  padding-bottom: 40px;\r\n  border-bottom: 1px solid ${({ theme }) => theme.color.gray20};\r\n  margin: 40px 0;\r\n  word-break: keep-all;\r\n`;\r\n\r\nexport const Emoji = styled.div`\r\n  font-size: 32px;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nexport const Info = styled.div`\r\n  display: flex;\r\n  font-size: 15px;\r\n  color: ${({ theme }) => theme.color.gray80};\r\n  font-family: SUIT-Bold;\r\n`;\r\n\r\nexport const Categories = styled.div`\r\n  margin-bottom: 5px;\r\n  font-size: 15px;\r\n`;\r\n\r\nexport const Category = styled(Link)`\r\n  margin-right: 4px;\r\n  color: ${({ theme }) => theme.color.gray60};\r\n  ${({ theme }) => hoverUnderline(theme)};\r\n  &:after {\r\n    background-color: ${({ theme }) => theme.color.gray60};\r\n  }\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n  font-size: 32px;\r\n  margin-bottom: 6px;\r\n  line-height: 1.3;\r\n\r\n  @media ${MOBILE_MEDIA_QUERY} {\r\n    font-size: 25px;\r\n  }\r\n`;\r\n","import React from 'react';\r\n\r\n\r\nimport * as S from './styled';\r\nimport HelpsClass from '@/src/models/helps';\r\n\r\ntype HelpsHeaderProps = {\r\n  help: HelpsClass;\r\n};\r\n\r\nconst HelpsHeader: React.FC<HelpsHeaderProps> = ({ help }) => {\r\n  return (\r\n    <S.Header>\r\n      {/* {post.emoji && <S.Emoji>{help}</S.Emoji>} */}\r\n      <S.Categories>\r\n        {help.categories.map((category) => (\r\n          <S.Category key={category} to={`/helps/${category}`}>\r\n            {category}\r\n          </S.Category>\r\n        ))}\r\n      </S.Categories>\r\n\r\n      <S.Title>{help.title}</S.Title>\r\n      {/* <S.Info>{post.date}</S.Info> */}\r\n    </S.Header>\r\n  );\r\n};\r\n\r\nexport default HelpsHeader;\r\n","import styled from '@emotion/styled';\r\nimport { Link } from 'gatsby';\r\n\r\nexport const Wrapper = styled.div`\r\n  display: grid;\r\n  width: 100%;\r\n  grid-template-columns: 49.3% 49.3%;\r\n  column-gap: 1.4%;\r\n`;\r\n\r\nexport const PostCard = styled(Link)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  background-color: ${({ theme }) => theme.color.gray10};\r\n  border-radius: 6px;\r\n  padding: 15px;\r\n  height: 105px;\r\n\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    background-color: ${({ theme }) => theme.color.gray20};\r\n    .title {\r\n      text-decoration: underline;\r\n    }\r\n  }\r\n\r\n  &.prev {\r\n    margin-right: auto;\r\n  }\r\n\r\n  &.next {\r\n    margin-left: auto;\r\n  }\r\n`;\r\n\r\nexport const Direction = styled.div`\r\n  color: ${({ theme }) => theme.color.gray60};\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nexport const Title = styled.div`\r\n  font-size: 16px;\r\n  line-height: 150%;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  word-break: break-word;\r\n  display: -webkit-box;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n`;\r\n","import React from 'react';\r\n\r\nimport PostClass from '@/src/models/post';\r\n\r\nimport * as S from './styled';\r\n\r\ntype PostNavigatorProps = {\r\n  prevPost: PostClass;\r\n  nextPost: PostClass;\r\n};\r\n\r\nconst PostNavigator: React.FC<PostNavigatorProps> = ({ prevPost, nextPost }) => {\r\n  return (\r\n    <S.Wrapper>\r\n      <div>\r\n        {nextPost && (\r\n          <S.PostCard className='prev' key={nextPost.id} to={nextPost.slug}>\r\n            <S.Direction>이전 글</S.Direction>\r\n            <S.Title>{nextPost.title}</S.Title>\r\n          </S.PostCard>\r\n        )}\r\n      </div>\r\n      <div>\r\n        {prevPost && (\r\n          <S.PostCard className='next' key={prevPost.id} to={prevPost.slug}>\r\n            <S.Direction>다음 글</S.Direction>\r\n            <S.Title>{prevPost.title}</S.Title>\r\n          </S.PostCard>\r\n        )}\r\n      </div>\r\n    </S.Wrapper>\r\n  );\r\n};\r\n\r\nexport default PostNavigator;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const PostContent = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  width: 100%;\r\n  margin-bottom: 30px;\r\n`;\r\n\r\n","import { graphql } from 'gatsby';\r\n\r\nimport BuyMeACoffee from '@/src/components/BuyMeACoffee';\r\nimport PostHeader from '@/src/components/PostHeader';\r\nimport PostNavigator from '@/src/components/PostNavigator';\r\nimport Seo from '@/src/components/Seo';\r\nimport Utterances from '@/src/components/Utterances';\r\nimport Layout from '@/src/layout';\r\nimport { Help, SiteMetadata } from '@/src/type';\r\n\r\nimport * as S from './styled';\r\nimport HelpsClass from '@/src/models/helps';\r\n\r\ntype PostTemplateProps = {\r\n  location: Location;\r\n  data: { prev: Help; next: Help; cur: Help; site: { siteMetadata: SiteMetadata }; markdownRemark: Help };\r\n};\r\n\r\nconst PostTemplate: React.FC<PostTemplateProps> = ({ location, data }) => {\r\n  const curPost = new HelpsClass(data.cur);\r\n  const prevPost = data.prev && new HelpsClass(data.prev);\r\n  const nextPost = data.next && new HelpsClass(data.next);\r\n  const utterancesRepo = data.site.siteMetadata.comments.utterances.repo;\r\n\r\n  return (\r\n    <Layout location={location}>\r\n      <Seo title={`소속 고객센터 | ${curPost?.title}`} description={curPost?.excerpt} />\r\n      <PostHeader help={curPost} />\r\n\r\n      <S.PostContent>\r\n        <div className='markdown' dangerouslySetInnerHTML={{ __html: curPost.html }} />\r\n      </S.PostContent>\r\n    \r\n      {/*\r\n      <S.BuyMeACoffeeWrapper>\r\n        <div>👇 도움이 되셨다면 👇</div>\r\n        <BuyMeACoffee />\r\n      </S.BuyMeACoffeeWrapper>\r\n      */}\r\n      \r\n      <PostNavigator prevPost={prevPost} nextPost={nextPost} />\r\n      <Utterances repo={utterancesRepo} path={curPost.slug} />\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default PostTemplate;\r\n\r\nexport const pageQuery = graphql`\r\n  query ($slug: String, $nextSlug: String, $prevSlug: String) {\r\n    cur: markdownRemark(fields: { slug: { eq: $slug } }) {\r\n      id\r\n      html\r\n      excerpt(pruneLength: 500, truncate: true)\r\n      frontmatter {\r\n        date(formatString: \"YYYY.MM.DD\")\r\n        title\r\n        categories\r\n      }\r\n      fields {\r\n        slug\r\n      }\r\n    }\r\n\r\n    next: markdownRemark(fields: { slug: { eq: $nextSlug } }) {\r\n      id\r\n      html\r\n      frontmatter {\r\n        date(formatString: \"YYYY.MM.DD\")\r\n        title\r\n        categories\r\n      }\r\n      fields {\r\n        slug\r\n      }\r\n    }\r\n\r\n    prev: markdownRemark(fields: { slug: { eq: $prevSlug } }) {\r\n      id\r\n      html\r\n      frontmatter {\r\n        date(formatString: \"YYYY.MM.DD\")\r\n        title\r\n        categories\r\n      }\r\n      fields {\r\n        slug\r\n      }\r\n    }\r\n\r\n    site {\r\n      siteMetadata {\r\n        siteUrl\r\n        comments {\r\n          utterances {\r\n            repo\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"names":["Wrapper","_styled","target","name","styles","_ref","repo","path","rootElm","createRef","isUtterancesLoaded","useRef","theme","useContext","ThemeManagerContext","useEffect","current","utterances","document","createElement","utterancesConfig","src","branch","isDark","Object","keys","forEach","configKey","setAttribute","appendChild","replaceChild","firstChild","___EmotionJSX","S","className","ref","HelpsClass","node","html","id","frontmatter","fields","excerpt","slug","categories","title","date","services","categoryArr","split","this","Header","color","gray20","Categories","Category","Link","_ref3","gray60","_ref4","hoverUnderline","_ref5","Title","MOBILE_MEDIA_QUERY","help","map","category","key","to","PostCard","gray10","_ref2","Direction","prevPost","nextPost","PostContent","location","data","curPost","cur","prev","next","utterancesRepo","site","siteMetadata","comments","Layout","Seo","description","PostHeader","dangerouslySetInnerHTML","__html","PostNavigator","Utterances"],"sourceRoot":""}